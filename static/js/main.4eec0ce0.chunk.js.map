{"version":3,"sources":["hoc/hoc.js","cards/cards.js","App.js","serviceWorker.js","index.js"],"names":["Aux","props","children","cards","class","type","Component","App","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAIeA,G,MAFH,SAACC,GAAD,OAAWA,EAAMC,WC2EdC,E,uKAxEP,IAAIA,EAgEJ,OA/DAA,EAAgB,yBAAKC,MAAM,aAC3B,yBAAKA,MAAM,QACP,yBAAKA,MAAM,cACP,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,YACP,uCAGR,yBAAKA,MAAM,aACP,yBAAKA,MAAM,eACP,wBAAIA,MAAM,QAAV,SACA,4BAAQC,KAAM,SAAQD,MAAM,SAA5B,aACA,uBAAGA,MAAM,WAAT,eACA,wBAAIA,MAAM,QACN,4CACA,0EACA,iEAKhB,yBAAKA,MAAM,QACP,yBAAKA,MAAM,cACP,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,YACP,0CAGR,yBAAKA,MAAM,aACP,yBAAKA,MAAM,eACP,wBAAIA,MAAM,QAAV,YACA,4BAAQC,KAAM,SAAQD,MAAM,SAA5B,gBACA,uBAAGA,MAAM,WAAT,eACA,wBAAIA,MAAM,QACN,4CACA,0EACA,6DACA,kDAKhB,yBAAKA,MAAM,QACP,yBAAKA,MAAM,cACP,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,YAAW,yCAE1B,yBAAKA,MAAM,aACP,yBAAKA,MAAM,eACP,wBAAIA,MAAM,QAAV,WACA,4BAAQC,KAAM,SAAQD,MAAM,SAA5B,eACA,uBAAGA,MAAM,WAAT,eACA,wBAAIA,MAAM,QACN,4CACA,kDACA,0EACA,6DACA,mDAOZ,6BACKD,O,GArEGG,aCaLC,E,uKARX,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,W,GAJUD,aCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EACJ,kBAAC,EAAD,MAGFC,IAASC,OACPF,EACAG,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4eec0ce0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Aux = (props) => props.children;\r\n\r\nexport default Aux;","import React, { Component } from 'react';\r\n\r\nclass cards extends Component {\r\n    \r\n    render() {\r\n        let cards = null;\r\n        cards =         <div class=\"container\">\r\n        <div class=\"card\">\r\n            <div class=\"front-face\">\r\n                <div class=\"img_f img_f-3\"></div>\r\n                <div class=\"img_f--3\">\r\n                    <h1>BASIC</h1>\r\n                </div>\r\n            </div>\r\n            <div class=\"back-face\">\r\n                <div class=\"decf decf-1\">\r\n                    <h1 class=\"head\">BASIC</h1>\r\n                    <button type= \"button\"class=\"btn_b\">GET BASIC</button>\r\n                    <p class=\"price_b\">$17 / month</p>\r\n                    <ul class=\"list\">\r\n                        <li>HD available</li>\r\n                        <li>Watch on your laptop, TV, phone and tablet</li>\r\n                        <li>Unlimited movies and TV shows</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"card\">\r\n            <div class=\"front-face\">\r\n                <div class=\"img_f img_f-1\"></div>\r\n                <div class=\"img_f--1\">\r\n                    <h1>STANDARD</h1>\r\n                </div>\r\n            </div>\r\n            <div class=\"back-face\">\r\n                <div class=\"decf decf-2\">\r\n                    <h1 class=\"head\">Standard</h1>\r\n                    <button type= \"button\"class=\"btn_b\">GET STANDARD</button>\r\n                    <p class=\"price_b\">$27 / month</p>\r\n                    <ul class=\"list\">\r\n                        <li>HD available</li>\r\n                        <li>Watch on your laptop, TV, phone and tablet</li>\r\n                        <li>Unlimited movies and TV shows</li>\r\n                        <li>Cancel anytime</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"card\">\r\n            <div class=\"front-face\">\r\n                <div class=\"img_f img_f-2\"></div>\r\n                <div class=\"img_f--2\"><h1>PREMIUM</h1></div>\r\n            </div>\r\n            <div class=\"back-face\">\r\n                <div class=\"decf decf-3\">\r\n                    <h1 class=\"head\">Premium</h1>\r\n                    <button type= \"button\"class=\"btn_b\">GET PREMIUM</button>\r\n                    <p class=\"price_b\">$57 / month</p>\r\n                    <ul class=\"list\">\r\n                        <li>HD available</li>\r\n                        <li>Ultra HD available</li>\r\n                        <li>Watch on your laptop, TV, phone and tablet</li>\r\n                        <li>Unlimited movies and TV shows</li>\r\n                        <li>Cancel anytime</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>;\r\n        return (\r\n            <div>\r\n                {cards}\r\n            </div>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default cards;","import React, { Component } from 'react';\nimport './App.css';\nimport Aux from './hoc/hoc';\nimport Cards from './cards/cards';\n\nclass App extends Component {\n  render() {\n    return (\n      <Aux>\n        <Cards />\n      </Aux>\n    )\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n  <App/>\n);\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}